package Service;

import DAO.AccountDAO;
import DAO.MessageDAO;
import Model.Account;
import Model.Message;

import java.util.ArrayList;


/**
 * Service class handles operations for both message and account databases
 * through their respective DAOs
 */
public class SocialMediaService {

    AccountDAO accountDAO;
    MessageDAO messageDAO;

    public SocialMediaService() {
        this.accountDAO = new AccountDAO();
        this.messageDAO = new MessageDAO();
    }

    /*
     * This constructor for testing purposes
     */
    public SocialMediaService(AccountDAO dao) {
        this.accountDAO = dao;
    }

    /**
     * Creates a new account if proposal meets requirements
     *  - Username must not be blank
     *  - Passwords must be 4 or more characters long
     *  - Account with username must not already exist
     * @param acc Account object without account_id
     * @return new Account object with account_id generated by account database if successful,
     * otherwise null
     */
    public Account registerAccount(Account acc) {
        if (acc.getUsername() == "")
            return null;
        if (acc.getPassword().length() < 4)
            return null;
        if (accountDAO.exists(acc.getUsername()))
            return null;

        Account newAcc = accountDAO.addUser(acc);
        return newAcc;
    }

    /**
     * Login
     * @param acc Account object containing username and password
     * @return Account object of user with account_id if username and password valid, null otherwise
     */
    public Account login(Account acc) {
        return accountDAO.login(acc);
    }

    /**
     * Creates new message if it meets requirements
     *  - text must be less than 255 characters and not empty
     *  - posted_by id must match a valid account_id of a user
     * @param message Message object without message_id
     * @return Message object with message_id if creatinon successful, null otherwise
     */
    public Message createMessage(Message message) {
        if (message.getMessage_text().length() == 0)
            return null;
        if (message.getMessage_text().length() > 255)
            return null;
        if (!accountDAO.exists(message.getPosted_by()))
            return null;
        
        return messageDAO.createMessage(message);
    }

    /**
     * Gets all messages in system
     * @return ArrayList of all messages, empty list if none exist
     */
    public ArrayList<Message> getAllMessages() {
        return messageDAO.getAllMessages();
    }

    /**
     * Gets a single message given a message id
     * @param message_id message_id of a message in database
     * @return Message object of retrieved message, null otherwise
     */
    public Message getMessageById(int message_id) {
        return messageDAO.getMessageById(message_id);
    }

    /**
     * Deletes a message from the system
     * @param message_id
     * @return Message object of message that was deleted, null otherwise
     */
    public Message deleteMessageById(int message_id) {
        Message deletedMessage = messageDAO.getMessageById(message_id);

        if (deletedMessage == null) // message not found
            return null;

        messageDAO.deleteMessageById(message_id);
        return deletedMessage;
    }
    
    /**
     * Edits the message_text field of an existing message
     * @param message_id
     * @param message_text must match message length requirements 0-255 charachers
     * @return Message with new message text if params valid, null otherwise
     */
    public Message updateMessageById(int message_id, String message_text) {
        // verify message length
        if (message_text.length() == 0 || message_text.length() > 255)
            return null;

        Message message = messageDAO.getMessageById(message_id);

        if (message == null) // message not found
            return null;

        message.setMessage_text(message_text);
        return message;
    }

    /**
     * Gets all messages from a given user
     * @param account_id
     * @return ArrayList of a all messages from a user, empty if no messages or account_id not found
     */
    public ArrayList<Message> getAllMessagesFromUser(int account_id) {
        return messageDAO.getAllMessagesFromUser(account_id);
    }
}
