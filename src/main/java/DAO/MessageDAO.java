package DAO;

import Model.Message;
import Util.ConnectionUtil;

import java.sql.Connection;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;


public class MessageDAO {

    /**
     * Adds a new message to the database
     * @param message Message object to be added
     * @return Message object with message_id generated by the database
     */
    public Message createMessage(Message message) {
        Connection conn = ConnectionUtil.getConnection();

        try {
            String sql = "INSERT INTO message (posted_by, message_text, time_posted_epoch) VALUES (?, ?, ?);";
            PreparedStatement ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            ps.setInt(1, message.getPosted_by());
            ps.setString(2, message.getMessage_text());
            ps.setLong(3, message.getTime_posted_epoch());
            ps.executeUpdate();
            ResultSet rs = ps.getGeneratedKeys();

            if (rs.next()) {
                int id = rs.getInt("message_id");
                message.setMessage_id(id);
                return message;
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        return null;
    }

    /**
     * Gets all messages
     * @return ArrayList of all messages in message database, empty if none
     */
    public ArrayList<Message> getAllMessages() {
        Connection conn = ConnectionUtil.getConnection();
        ArrayList<Message> messages = new ArrayList<Message>();

        try {
            String sql = "SELECT * FROM message;";
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);

            while (rs.next()) {
                int message_id = rs.getInt("message_id");
                int posted_by = rs.getInt("posted_by");
                String message_text = rs.getString("message_text");
                long time_posted_epoch = rs.getLong("time_posted_epoch");
                Message nextMessage = new Message(message_id, posted_by, message_text, time_posted_epoch);
                messages.add(nextMessage);
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        return messages;
    }

    /**
     * Gets a single message by message_id
     * @param message_id
     * @return Message object with message_id, null if it does not exist
     */
    public Message getMessageById(int message_id) {
        Connection conn = ConnectionUtil.getConnection();

        try {
            String sql = "SELECT * FROM message WHERE message_id = ?";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setInt(1, message_id);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                int posted_by = rs.getInt("posted_by");
                String message_text = rs.getString("message_text");
                long time_posted_epoch = rs.getLong("time_posted_epoch");
                return new Message(message_id, posted_by, message_text, time_posted_epoch);
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        return null;
    }

    /**
     * Deletes a single message by message_id
     * @param message_id
     * @return deleted Message object with message_id, null if it does not exist
     */
    public void deleteMessageById(int message_id) {
        Connection conn = ConnectionUtil.getConnection();

        try {
            String sql = "DELETE FROM message WHERE message_id = ?;";
            PreparedStatement ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            ps.setInt(1, message_id);
            ps.execute();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    /**
     * Gets all messages posted by user with account_id
     * @param account_id a valid account_id, corresponds to posted_by in message database
     * @return ArrayList of Messages objects from user with account_id, empty list if none
     */
    public ArrayList<Message> getAllMessagesFromUser(int account_id) {
        Connection conn = ConnectionUtil.getConnection();
        ArrayList<Message> messages = new ArrayList<Message>();

        try {
            String sql = "SELECT * FROM message WHERE posted_by = ?;";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setInt(1, account_id);
            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                int message_id = rs.getInt("message_id");
                String message_text = rs.getString("message_text");
                long time_posted_epoch = rs.getLong("time_posted_epoch");
                Message nextMessage = new Message(message_id, account_id, message_text, time_posted_epoch);
                messages.add(nextMessage);
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        return messages;
    }

}
